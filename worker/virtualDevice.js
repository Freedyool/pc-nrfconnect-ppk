/*
 * Copyright (c) 2025 Nordic Semiconductor ASA
 *
 * SPDX-License-Identifier: LicenseRef-Nordic-4-Clause
 */

/* eslint-disable no-bitwise */

// 用于替代 ppk2 硬件向上层注入采样数据的虚拟设备

const CBITS = (val, mask, pos) => (val & mask) << pos;

const generateData = (a, r, c, l) =>
    CBITS(a, 0x3fff, 0) |
    CBITS(r, 0x7, 14) |
    CBITS(c, 0x3f, 18) |
    CBITS(l, 0xff, 24);

let tmpIndex = 0;
const sampRate = 100_000; // Hz
const sendIntv = 30; // ms

let timeStamp = 0;
const dataType = 0; // 0: raw, 1: processed

const dataMockRaw = () => {
    const now = Date.now();
    // How many Samples to send
    const trunks = Math.floor(sampRate * ((now - timeStamp) / 1000));
    const dataSize = trunks * 4; // bytes

    const data = Buffer.alloc(dataSize);

    for (let i = 0; i < trunks; i += 1) {
        const adc =
            0x200 +
            Math.round(0x1ff * Math.sin((2 * Math.PI * tmpIndex) / sampRate));
        const range = 3;
        const counter = tmpIndex & 0x3f;
        const logic = tmpIndex & 0xff;

        tmpIndex += 1;

        data.writeUInt32LE(
            generateData(adc, range, counter, logic) >>> 0,
            i * 4
        );
    }

    timeStamp = now;

    return data;
};

const dataMockProcessed = () => {
    const now = Date.now();
    const trunks = Math.floor(sampRate * ((now - timeStamp) / 1000));
    const dataSize = trunks * 10; // 8bytes double + 2bytes uint16

    const data = Buffer.alloc(dataSize);

    for (let i = 0; i < trunks; i += 1) {
        const adc = Math.round(
            (1 + Math.sin((2 * Math.PI * tmpIndex) / sampRate)) * 1e6
        );
        const logic = 0x1;

        tmpIndex += 1;

        data.writeDoubleLE(adc, i * 10);
        data.writeUInt16LE(logic, i * 10 + 8);
    }

    timeStamp = now;

    return data;
};

const meta = [
    32, 82, 48, 58, 32, 49, 48, 48, 54, 46, 54, 52, 56, 57, 56, 54, 56, 49, 54,
    52, 48, 54, 50, 48, 48, 48, 48, 48, 48, 48, 10, 82, 49, 58, 32, 49, 48, 49,
    46, 57, 54, 51, 54, 50, 51, 48, 52, 54, 56, 55, 53, 48, 48, 48, 48, 48, 48,
    48, 48, 10, 82, 50, 58, 32, 49, 48, 46, 51, 53, 56, 56, 49, 55, 49, 48, 48,
    53, 50, 52, 57, 48, 50, 48, 48, 48, 48, 48, 10, 82, 51, 58, 32, 48, 46, 57,
    55, 51, 50, 56, 51, 48, 53, 50, 52, 52, 52, 52, 53, 56, 48, 48, 48, 48, 48,
    10, 82, 52, 58, 32, 48, 46, 48, 53, 55, 48, 55, 52, 50, 52, 56, 55, 57, 48,
    55, 52, 48, 57, 55, 48, 48, 48, 10, 71, 83, 48, 58, 32, 48, 46, 48, 48, 48,
    48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 48, 10, 71,
    83, 49, 58, 32, 49, 50, 57, 46, 54, 55, 51, 57, 49, 57, 54, 55, 55, 55, 51,
    52, 51, 56, 48, 48, 48, 48, 48, 48, 10, 71, 83, 50, 58, 32, 49, 57, 46, 54,
    57, 57, 49, 51, 50, 57, 49, 57, 51, 49, 49, 53, 50, 51, 48, 48, 48, 48, 48,
    10, 71, 83, 51, 58, 32, 50, 46, 55, 52, 49, 56, 55, 51, 55, 52, 49, 49, 52,
    57, 57, 48, 50, 51, 48, 48, 48, 48, 10, 71, 83, 52, 58, 32, 48, 46, 48, 55,
    56, 56, 49, 50, 54, 50, 49, 53, 51, 51, 56, 55, 48, 55, 48, 48, 48, 48, 10,
    71, 73, 48, 58, 32, 49, 46, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
    48, 48, 48, 48, 48, 48, 48, 48, 10, 71, 73, 49, 58, 32, 48, 46, 57, 54, 52,
    49, 51, 48, 54, 57, 57, 54, 51, 52, 53, 53, 50, 48, 48, 48, 48, 48, 10, 71,
    73, 50, 58, 32, 48, 46, 57, 53, 57, 52, 57, 49, 52, 51, 49, 55, 49, 51, 49,
    48, 52, 50, 48, 48, 48, 48, 10, 71, 73, 51, 58, 32, 48, 46, 57, 52, 55, 52,
    57, 55, 56, 52, 52, 54, 57, 54, 48, 52, 52, 57, 48, 48, 48, 48, 10, 71, 73,
    52, 58, 32, 48, 46, 57, 53, 54, 53, 53, 54, 52, 51, 57, 51, 57, 57, 55, 49,
    57, 50, 48, 48, 48, 48, 10, 79, 48, 58, 32, 49, 50, 54, 46, 53, 54, 54, 48,
    49, 55, 49, 53, 48, 56, 55, 56, 57, 48, 48, 48, 48, 48, 48, 48, 10, 79, 49,
    58, 32, 56, 54, 46, 54, 50, 48, 54, 48, 53, 52, 54, 56, 55, 53, 48, 48, 48,
    48, 48, 48, 48, 48, 48, 10, 79, 50, 58, 32, 55, 51, 46, 57, 57, 55, 48, 52,
    55, 52, 50, 52, 51, 49, 54, 52, 48, 48, 48, 48, 48, 48, 48, 10, 79, 51, 58,
    32, 53, 55, 46, 55, 53, 57, 55, 55, 55, 48, 54, 57, 48, 57, 49, 56, 48, 48,
    48, 48, 48, 48, 48, 10, 79, 52, 58, 32, 49, 48, 48, 46, 51, 50, 54, 52, 53,
    52, 49, 54, 50, 53, 57, 55, 54, 54, 48, 48, 48, 48, 48, 48, 10, 86, 68, 68,
    58, 32, 51, 51, 48, 48, 10, 72, 87, 58, 32, 51, 53, 56, 55, 10, 109, 111,
    100, 101, 58, 32, 50, 10, 83, 48, 58, 32, 45, 48, 46, 48, 48, 48, 48, 48,
    48, 48, 49, 55, 54, 49, 50, 57, 53, 49, 48, 57, 55, 53, 57, 10, 83, 49, 58,
    32, 45, 48, 46, 48, 48, 48, 48, 48, 48, 48, 56, 50, 57, 54, 54, 56, 53, 54,
    52, 57, 54, 49, 49, 10, 83, 50, 58, 32, 45, 48, 46, 48, 48, 48, 48, 48, 48,
    51, 50, 57, 48, 51, 53, 55, 49, 52, 50, 51, 48, 52, 57, 10, 83, 51, 58, 32,
    45, 48, 46, 48, 48, 48, 48, 48, 51, 52, 53, 48, 53, 54, 54, 57, 54, 52, 54,
    48, 50, 51, 51, 10, 83, 52, 58, 32, 48, 46, 48, 48, 50, 51, 56, 55, 48, 49,
    53, 49, 52, 56, 57, 57, 55, 51, 48, 55, 48, 48, 10, 73, 48, 58, 32, 48, 46,
    48, 48, 48, 48, 48, 48, 48, 54, 56, 53, 50, 56, 49, 56, 48, 52, 54, 51, 53,
    53, 10, 73, 49, 58, 32, 48, 46, 48, 48, 48, 48, 48, 48, 49, 51, 50, 53, 50,
    49, 53, 55, 55, 55, 49, 49, 52, 57, 10, 73, 50, 58, 32, 48, 46, 48, 48, 48,
    48, 53, 55, 54, 51, 57, 54, 55, 48, 53, 53, 56, 50, 55, 51, 55, 57, 10, 73,
    51, 58, 32, 45, 48, 46, 48, 48, 48, 50, 51, 51, 54, 50, 49, 52, 56, 50, 48,
    51, 56, 56, 55, 48, 52, 53, 10, 73, 52, 58, 32, 45, 48, 46, 48, 48, 55, 57,
    54, 57, 55, 57, 50, 57, 51, 50, 50, 55, 49, 57, 53, 55, 48, 48, 10, 85, 71,
    48, 58, 32, 49, 46, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
    48, 48, 48, 48, 48, 48, 10, 85, 71, 49, 58, 32, 49, 46, 48, 48, 48, 48, 48,
    48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 10, 85, 71, 50,
    58, 32, 49, 46, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
    48, 48, 48, 48, 48, 10, 85, 71, 51, 58, 32, 49, 46, 48, 48, 48, 48, 48, 48,
    48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 10, 85, 71, 52, 58,
    32, 49, 46, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
    48, 48, 48, 48, 10, 73, 65, 58, 32, 53, 56, 10, 69, 78, 68, 10,
];

let handle = null;

process.on('message', msg => {
    if (msg.open) {
        console.log('\x1b[2J'); // ansi clear screen
        process.send({ opening: msg.open });
        process.send({ started: msg.open });
    }

    if (msg.write) {
        switch (msg.write[0]) {
            case 25:
                process.send({ type: 'Buffer', data: meta });
                break;
            case 6: // start
                if (handle) {
                    process.send({ error: handle });
                    clearInterval(handle);
                }
                handle = setInterval(() => {
                    const data =
                        dataType === 0 ? dataMockRaw() : dataMockProcessed();
                    process.send(data.slice(), err => {
                        if (err) console.log(err);
                    });
                }, sendIntv);
                timeStamp = Date.now();
                tmpIndex = Math.random() * sampRate; // random offset
                break;
            case 7: // stop
                clearInterval(handle);
                handle = null;
                tmpIndex = 0;
                break;
            case 12: // power on
            case 13: // set power mode
            default:
                process.send({ reply: msg });
                break;
        }
    }
});

process.on('disconnect', () => {
    console.log('parent process disconnected, cleaning up');
    process.exit();
});
